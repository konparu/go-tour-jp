More types: structs, slices, and maps.
Learn how to define types based on existing ones: this lesson covers structs, arrays, slices, and maps.

The Go Authors
https://golang.org

* Pointers

Goはポインタを扱います。
ポインタは変数のメモリアドレスを指します。

変数 `T` のポインタは、 `*T` 型で、ゼロ値は `nil` です。

	var p *int

`&` オペレータは、そのオペランド( _operand_ )へのポインタを引き出します。

	i := 42
	p = &i

`*` オペレータは、ポインタの指す先の変数を示します。

	fmt.Println(*p) // ポインタpを通してiから値を読みだす
	*p = 21         // ポインタpを通してiへ値を代入する

これは "dereferencing" または "indirecting" としてよく知られています。

なお、C言語とは異なり、ポインタ演算はありません。

.play moretypes/pointers.go

* Structs

`struct` (構造体)は、フィールド( _field_ )の集まりです。

( `type` 宣言は型を宣言するためのものです)

.play moretypes/structs.go

* Struct Fields

structのフィールドは、ドット( `.` )を用いてアクセスします。

.play moretypes/struct-fields.go

* Pointers to structs

structのフィールドは、structのポインタを通してアクセスすることもできます。

structのフィールド`X`にアクセスするには、structのポインタ`p`を用いて`(*p).X`と書くことができます。
この書き方は複雑なため、go言語では明示的なdereferenceを省略して`p.X`と書くことが許されています。

.play moretypes/struct-pointers.go

* Struct Literals

structリテラルは、フィールドの値を列挙することで新しいstructの初期値の割り当てを示しています。

`Name:` 構文を使って、フィールドの一部だけを列挙することができます(この方法でのフィールドの指定順序は関係ありません)。
例では `X:`1` として `X` だけを初期化しています。

`&` を頭に付けると、新しく割り当てられたstructへのポインタを戻します。

.play moretypes/struct-literals.go


* Arrays

`[n]T` 型は、型 `T` の `n` 個の変数の配列( _array_ )を表します。

以下は、intの10個の配列を宣言しています:

	var a [10]int

配列の長さは、型の一部分です。ですので、配列のサイズを変えることはできません。
これは制約のように思えますが、心配しないでください。
Goは配列を扱うための便利な方法を提供しています。

.play moretypes/array.go


* Slices

An array has a fixed size.
A slice, on the other hand, is a dynamically-sized,
flexible view into the elements of an array.
In practice, slices are much more common than arrays.

The type `[]T` is a slice with elements of type `T`.

This expression creates a slice of the first five elements of the array `a`:

	a[0:5]

.play moretypes/slices.go


* Slices are like references to arrays

A slice does not store any data,
it just describes a section of an underlying array.

Changing the elements of a slice modifies the
corresponding elements of its underlying array.

Other slices that share the same underlying array will see those changes.

.play moretypes/slices-pointers.go


* Slice literals

A slice literal is like an array literal without the length.

This is an array literal:

	[3]bool{true, true, false}

And this creates the same array as above,
then builds a slice that references it:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice defaults

When slicing, you may omit the high or low bounds to use their defaults instead.

The default is zero for the low bound and the length of the slice for the high bound.

For the array

	var a [10]int

these slice expressions are equivalent:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Slice length and capacity

A slice has both a _length_ and a _capacity_.

The length of a slice is the number of elements it contains.

The capacity of a slice is the number of elements in the underlying array,
counting from the first element in the slice.

The length and capacity of a slice `s` can be obtained using the expressions
`len(s)` and `cap(s)`.

You can extend a slice's length by re-slicing it,
provided it has sufficient capacity.
Try changing one of the slice operations in the example program to extend it
beyond its capacity and see what happens.

.play moretypes/slice-len-cap.go


* Nil slices

The zero value of a slice is `nil`.

A nil slice has a length and capacity of 0
and has no underlying array.

.play moretypes/nil-slices.go


* Creating a slice with make

Slices can be created with the built-in `make` function;
this is how you create dynamically-sized arrays.

The `make` function allocates a zeroed array
and returns a slice that refers to that array:

	a := make([]int, 5)  // len(a)=5

`make` の3番目の引数に、スライスの容量( _capacity_ )を指定できます。
`cap(b)` で、スライスの容量を返します:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices of slices

Slices can contain any type, including other slices.

.play moretypes/slices-of-slice.go


* Appending to a slice

スライスへ新しい要素を追加するには、Goの組み込みの `append` を使います。
`append` についての詳細は [[https://golang.org/pkg/builtin/#append][documentation]] を参照してみてください。

	func append(s []T, vs ...T) []T

上の定義を見てみましょう。 `append` への最初のパラメータ `s` は、追加元となる `T` 型のスライスです。
残りの `vs` は、追加する `T` 型の変数群です。

`append` の戻り値は、追加元のスライスと追加する変数群を合わせたスライスとなります。

もし、元の配列 `s` が、変数群を追加する際に容量が小さい場合は、より大きいサイズの配列を割り当て直します。
その場合、戻り値となるスライスは、新しい割当先を示すようになります。

(スライスについてより詳しく学ぶには、[[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]]を読んでみてください)

.play moretypes/append.go


* Range

`for` ループに利用する `range` は、スライスや、マップ( `map` )をひとつずつ反復処理するために使います。

スライスをrangeで繰り返す場合、rangeは反復毎に2つの変数を返します。
1つ目の変数はインデックス( _index_ )で、2つ目はインデックスの場所の要素のコピーです。

.play moretypes/range.go

* Range continued

インデックスや値は、 " `_` "(アンダーバー) へ代入することで捨てることができます。

もしインデックスだけが必要なのであれば、例のコードの場合 " `,`value` " の部分を `_` にします。

.play moretypes/range-continued.go

* Exercise: Slices

`Pic` 関数を実装してみましょう。
このプログラムを実行すると、生成した画像が下に表示されるはずです。
この関数は、長さ `dy` のsliceに、各要素が8bitのunsigned int型で長さ `dx` のsliceを割り当てたものを返すように実装する必要があります。
画像は、整数値をグレースケール(実際はブルースケール)として解釈したものです。

生成する画像は、好きに選んでください。例えば、面白い関数に、 `(x+y)/2` 、 `x*y` 、o `x^y` などがあります。

ヒント:( `[][]uint8` に、各 `[]uint8` を割り当てるためにループを使用する必要があります)

ヒント:( `uint8(intValue)` を型の変換のために使います)

#補足： `fmt.Println` などを用いて標準出力すると画像が表示されなくなってしまうため、使わないでください。

.play moretypes/exercise-slices.go

* Maps

`map` はキーと値とを関連付けます(マップします)。

The zero value of a map is `nil`.
A `nil` map has no keys, nor can keys be added.

The `make` function returns a map of the given type,
initialized and ready for use.

.play moretypes/maps.go

* Map literals

mapリテラルは、structリテラルに似ていますが、 *キー* ( _key_ )が必要です。

.play moretypes/map-literals.go

* Map literals continued

もし、mapに渡すトップレベルの型が単純な型名である場合は、リテラルの要素から推定できますので、その型名を省略することができます。

.play moretypes/map-literals-continued.go

* Mutating Maps

map `m` の操作を見ていきましょう。

`m` へ要素(elem)の挿入や更新:

	m[key] = elem

要素の取得:

	elem = m[key]

要素の削除:

	delete(m, key)

キーに対する要素が存在するかどうかは、2つの目の値で確認します:

	elem, ok = m[key]

もし、 `m` に `key` があれば、変数 `ok` は `true` となり、存在しなければ、 `ok` は `false` となります。

なお、mapに `key` が存在しない場合、 `elem` はmapの要素の型のゼロ値となります。

Note: もし `elem` や `ok` を宣言していないのであれば、次のように `:=` で短く表現できます:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Exercise: Maps

`WordCount` 関数を実装してみましょう。string `s` で渡される文章の、各単語の出現回数のmapを返す必要があります。
`wc.Test` 関数は、引数に渡した関数に対しテストスイートを実行し、成功か失敗かを結果に表示します。

[[https://golang.org/pkg/strings/#Fields][strings.Fields]] で、何かヒントを得ることができるはずです。

Note: このテストスイートで何を入力とし、何を期待しているかについては、[[https://github.com/golang/tour/blob/master/wc/wc.go][golang.org/x/tour/wc]]]を見てみてください。

.play moretypes/exercise-maps.go

* Function values

関数も変数です。他の変数のように関数を渡すことができます。

関数値( _function_value_ )は、関数の引数に取ることもできますし、戻り値としても利用できます。

.play moretypes/function-values.go

* Function closures

Goの関数は [[https://ja.wikipedia.org/wiki/クロージャ][クロージャ( _closure_ )]] です。
クロージャは、それ自身の外部から変数を参照する関数値です。
この関数は、参照された変数へアクセスして変えることができ、その意味では、その関数は変数へ"バインド"( _bind_ )されています。

例えば、 `adder` 関数はクロージャを返しています。
各クロージャは、それ自身の `sum` 変数へバインドされます。

.play moretypes/function-closures.go

* Exercise: Fibonacci closure

関数を用いた面白い例を見てみましょう。

`fibonacci` (フィボナッチ)関数を実装しましょう。この関数は、連続する[[https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%9C%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0][フィボナッチ数]](0, 1, 1, 2, 3, 5, ...)を返す関数(クロージャ)を返します。

.play moretypes/exercise-fibonacci-closure.go

* Congratulations!

この章はこれで終わりです。

[[/list][章のリスト]]から学びたいところを見ても良いですし、
[[javascript:click('.next-page')][>]] をクリックして次の章へ進みましょう。
